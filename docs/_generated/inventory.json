{
  "timestamp": "2025-09-05 16:31:48 UTC",
  "python_version": "Python 3.12.11",
  "cwd": "/Users/am/Code/Fresh",
  "shell_scripts": [
    {
      "name": "setup-firestore.sh",
      "path": "scripts/setup-firestore.sh",
      "executable": true,
      "description": "Setup Firestore emulator for local development"
    },
    {
      "name": "mvp.sh",
      "path": "scripts/mvp.sh",
      "executable": true,
      "description": "Minimal MVP runner: prints JSON-like summary and release notes"
    },
    {
      "name": "run-tests.sh",
      "path": "scripts/run-tests.sh",
      "executable": true
    },
    {
      "name": "check-tests-changed.sh",
      "path": "scripts/check-tests-changed.sh",
      "executable": true
    },
    {
      "name": "mcp-github.sh",
      "path": "scripts/mcp-github.sh",
      "executable": true,
      "description": "GitHub MCP server launcher"
    },
    {
      "name": "bootstrap.sh",
      "path": "scripts/bootstrap.sh",
      "executable": true,
      "description": "Bootstrap script for a fresh machine"
    },
    {
      "name": "monitor.sh",
      "path": "scripts/monitor.sh",
      "executable": true
    },
    {
      "name": "deploy.sh",
      "path": "scripts/deploy.sh",
      "executable": true,
      "description": "Agent deployment interface: configure and deploy agent swarms"
    },
    {
      "name": "dev_check.sh",
      "path": "scripts/dev_check.sh",
      "executable": true,
      "description": "dev:check \u2014 run quick quality checks locally"
    },
    {
      "name": "telegram.sh",
      "path": "scripts/telegram.sh",
      "executable": true,
      "description": "Fresh Telegram Bot Launcher"
    },
    {
      "name": "ask.sh",
      "path": "scripts/ask.sh",
      "executable": true,
      "description": "Ask and implement interface: describe what you want, get a feature branch with implementation plan"
    }
  ],
  "cli_commands": [
    {
      "command": "scan",
      "function": "cmd_scan",
      "docstring": "Scan repository for issues and print as JSON.\n    \n    Args:\n        args: Parsed command-line arguments"
    },
    {
      "command": "spawn",
      "function": "cmd_spawn",
      "docstring": "Spawn an agent for a specific task.\n    \n    Args:\n        args: Parsed command-line arguments"
    },
    {
      "command": "hook-features",
      "function": "cmd_hook_features",
      "docstring": "Autonomously hook up unconnected features to CLI and API interfaces.\n    \n    Args:\n        args: Parsed command-line arguments"
    },
    {
      "command": "orchestrate",
      "function": "cmd_orchestrate",
      "docstring": "Orchestrate complex multi-agent research and analysis.\n    \n    Args:\n        args: Parsed command-line arguments"
    },
    {
      "command": "monitor",
      "function": "cmd_monitor",
      "docstring": "Monitor command with enhanced interactive option."
    },
    {
      "command": "run",
      "function": "cmd_run",
      "docstring": "Run autonomous development loop.\n    \n    Args:\n        args: Parsed command-line arguments"
    },
    {
      "command": "autonomous-status",
      "function": "cmd_autonomous_status",
      "docstring": "Show autonomous loop status."
    },
    {
      "command": "autonomous-cycle",
      "function": "cmd_autonomous_cycle",
      "docstring": "Run single autonomous improvement cycle."
    },
    {
      "command": "autonomous-start",
      "function": "cmd_autonomous_start",
      "docstring": "Start continuous autonomous loop."
    },
    {
      "command": "autonomous-stop",
      "function": "cmd_autonomous_stop",
      "docstring": "Stop continuous autonomous loop."
    },
    {
      "command": "autonomous-emergency-stop",
      "function": "cmd_autonomous_emergency_stop",
      "docstring": "Activate emergency stop."
    },
    {
      "command": "autonomous-clear-emergency",
      "function": "cmd_autonomous_clear_emergency",
      "docstring": "Clear emergency stop."
    },
    {
      "command": "feature-inventory",
      "function": "cmd_feature_inventory",
      "docstring": "Run feature inventory to identify unhooked features and quality issues."
    },
    {
      "command": "feature-validate",
      "function": "cmd_feature_validate",
      "docstring": "Validate that all features meet quality standards."
    },
    {
      "command": "feature-hook-missing",
      "function": "cmd_feature_hook_missing",
      "docstring": "Hook up features that are implemented but not accessible."
    },
    {
      "command": "memory",
      "function": "cmd_memory",
      "docstring": "Memory command dispatcher."
    },
    {
      "command": "dashboard",
      "function": "cmd_dashboard",
      "docstring": "Launch the enhanced conversational dashboard."
    },
    {
      "command": "ask",
      "function": "cmd_ask",
      "docstring": "Execute ask-and-implement workflow."
    },
    {
      "command": "deploy",
      "function": "cmd_deploy",
      "docstring": "Execute deploy commands."
    },
    {
      "command": "telegram",
      "function": "cmd_telegram",
      "docstring": "Launch the Telegram bot interface."
    },
    {
      "command": "coordination",
      "function": "cmd_coordination",
      "docstring": "Coordination command dispatcher."
    },
    {
      "command": "memory-write",
      "function": "cmd_memory_write",
      "docstring": "Write content to memory store."
    },
    {
      "command": "memory-search",
      "function": "cmd_memory_search",
      "docstring": "Search memories by query."
    },
    {
      "command": "memory-analytics",
      "function": "cmd_memory_analytics",
      "docstring": "Get memory analytics."
    },
    {
      "command": "memory-optimize",
      "function": "cmd_memory_optimize",
      "docstring": "Optimize memory by removing low-importance items."
    },
    {
      "command": "memory-backup",
      "function": "cmd_memory_backup",
      "docstring": "Backup memories to JSON file."
    },
    {
      "command": "memory-smart-write",
      "function": "cmd_memory_smart_write",
      "docstring": "Smart write using enhanced memory tools."
    },
    {
      "command": "memory-semantic-search",
      "function": "cmd_memory_semantic_search",
      "docstring": "Semantic search using enhanced memory tools."
    },
    {
      "command": "coordination-record-agent-activity",
      "function": "cmd_coordination_record_agent_activity",
      "docstring": "Record agent lifecycle activity."
    },
    {
      "command": "coordination-record-flow-activity",
      "function": "cmd_coordination_record_flow_activity",
      "docstring": "Record agent flow coordination activity."
    },
    {
      "command": "coordination-recent-events",
      "function": "cmd_coordination_recent_events",
      "docstring": "Get recent coordination and activity events."
    },
    {
      "command": "coordination-activity-level",
      "function": "cmd_coordination_activity_level",
      "docstring": "Get current system activity level."
    },
    {
      "command": "coordination-refresh-interval",
      "function": "cmd_coordination_refresh_interval",
      "docstring": "Get recommended refresh interval based on activity."
    }
  ],
  "tests": {
    "tests/test_intelligent_memory.py": [
      "test_auto_classification",
      "test_keyword_extraction",
      "test_importance_scoring",
      "test_summary_generation",
      "test_related_memory_detection",
      "test_semantic_search",
      "test_search_by_type",
      "test_memory_optimization",
      "test_memory_analytics",
      "test_smart_write_memory",
      "test_semantic_search_memory",
      "test_get_memory_by_type",
      "test_analyze_memory_usage",
      "test_optimize_memory_store",
      "test_fallback_to_basic_store",
      "test_full_workflow"
    ],
    "tests/test_intent_normalizer.py": [
      "test_normalize_tag_variants",
      "test_intent_normalizer_deduplicates_and_orders"
    ],
    "tests/test_docs_alignment.py": [
      "test_warp_md_accuracy",
      "test_readme_has_status_reference",
      "test_no_broken_claims_in_docs",
      "test_inventory_json_exists",
      "test_cli_commands_documented",
      "test_executable_scripts_marked_correctly",
      "test_feature_status_is_current"
    ],
    "tests/test_release_notes.py": [
      "test_generate_release_notes_basic",
      "test_generate_release_notes_tag_filter"
    ],
    "tests/test_scaffold_python_package.py": [
      "test_scaffold_python_package"
    ],
    "tests/test_monitor_event_bus.py": [
      "test_bus_append_and_read",
      "test_detector_reads_persisted_events"
    ],
    "tests/test_rule_consolidation.py": [
      "test_consolidated_rules_file_exists",
      "test_validation_script_passes",
      "test_no_rule_regression",
      "test_consolidation_efficiency",
      "test_precedence_order_maintained",
      "test_no_duplicate_requirements"
    ],
    "tests/test_dod_checker.py": [
      "test_extract_adr_refs_finds_unique_refs"
    ],
    "tests/test_mcp_integration.py": [
      "test_mcp_client_tool_discovery",
      "test_mcp_client_tool_call",
      "test_discovery_initialization",
      "test_process_server_discovery",
      "test_network_server_discovery",
      "test_wellknown_server_discovery",
      "test_capability_categorization",
      "test_tool_initialization",
      "test_research_query",
      "test_caching_mechanism",
      "test_research_with_mcp_function"
    ],
    "tests/test_assist_plan_pr.py": [
      "test_assist_plan_pr_commits_docs_only",
      "test_assist_plan_pr_enforces_docs_only"
    ],
    "tests/test_agency_persistence.py": [
      "test_context_function_available"
    ],
    "tests/test_enhanced_orchestration.py": [
      "test_initialization",
      "test_business_opportunity_decomposition",
      "test_clarification_system",
      "test_orchestration_statistics",
      "test_initialization",
      "test_market_trends_research",
      "test_competitor_analysis",
      "test_initialization",
      "test_codebase_capabilities_assessment",
      "test_initialization",
      "test_opportunity_scoring",
      "test_scoring_criteria",
      "test_mcp_fallback_mechanism",
      "test_company_research_fallback",
      "test_parallel_execution_logic"
    ],
    "tests/test_next_steps.py": [
      "test_next_steps_for_bug_focuses_on_tests_and_fix",
      "test_next_steps_for_feature_focuses_on_tests_then_impl"
    ],
    "tests/test_docs_only_enforce.py": [
      "test_docs_only_allowed_accepts_markdown_and_docs",
      "test_docs_only_allowed_rejects_code_paths"
    ],
    "tests/test_telegram_integration.py": [
      "test_analyze_development_request",
      "test_analyze_documentation_request",
      "test_analyze_bug_fix_request",
      "test_decision_includes_required_fields",
      "test_process_spawn_request",
      "test_agent_spawning_creates_correct_structure",
      "test_spawn_status_tracking",
      "test_bot_initialization",
      "test_user_authorization",
      "test_request_processing_flow",
      "test_complete_development_workflow",
      "test_invalid_spawn_request_handling",
      "test_father_decision_with_edge_cases",
      "test_api_development_scenario",
      "test_documentation_scenario"
    ],
    "tests/test_repo_scanner.py": [
      "test_scanner_initialization",
      "test_find_todos_in_files",
      "test_find_failing_tests",
      "test_failing",
      "test_passing",
      "test_parse_git_diff",
      "test_scan_repository_comprehensive",
      "test_app",
      "test_task_priority_ordering",
      "test_task_to_dict",
      "test_ignore_patterns",
      "test_find_type_errors",
      "test_scanner_with_no_issues",
      "test_scan_repository_function",
      "test_task_creation",
      "test_task_type_enum",
      "test_task_equality",
      "test_task_with_context",
      "test_find_todos_function",
      "test_find_failing_tests_function",
      "test_parse_git_diff_function"
    ],
    "tests/test_cli_health.py": [
      "test_health_outputs_ok_and_version"
    ],
    "tests/test_adr_tool.py": [
      "test_create_adr_creates_numbered_file",
      "test_create_adr_increments_id"
    ],
    "tests/test_memory_store.py": [
      "test_inmemory_store_write_and_query_ordering",
      "test_inmemory_store_returns_stable_ids"
    ],
    "tests/test_cli_assist_scan.py": [
      "test_assist_scan_json"
    ],
    "tests/test_adaptive_refresh.py": [
      "test_initial_state_is_idle",
      "test_interval_mapping_correct",
      "test_custom_min_interval_override",
      "test_interval_changes_with_activity",
      "test_ui_initializes_with_console",
      "test_generate_agent_table_structure",
      "test_color_coding_by_activity_level",
      "test_format_memory_rss",
      "test_format_response_time",
      "test_generate_timeline_sparkline",
      "test_update_display_integration",
      "test_monitor_uses_adaptive_intervals",
      "test_activity_hooks_record_events"
    ],
    "tests/test_mother_agent.py": [
      "test_mother_agent_initialization",
      "test_run_with_basic_parameters",
      "test_run_spawns_appropriate_agent_type",
      "test_run_with_test_generation_task",
      "test_run_with_architecture_task",
      "test_memory_persistence_on_spawn",
      "test_spawn_request_tracking",
      "test_error_handling_in_run",
      "test_model_selection",
      "test_output_type_validation",
      "test_integration_with_father_agent",
      "test_spawn_history_limit",
      "test_concurrent_spawn_safety",
      "test_get_spawn_statistics",
      "test_agent_result_creation",
      "test_agent_result_to_dict",
      "test_spawn_request_creation",
      "test_spawn_request_validation"
    ],
    "tests/test_agency_bootstrap.py": [
      "test_agency_bootstrap_constructs"
    ],
    "tests/test_cli_assist_report.py": [
      "test_assist_report_writes_file"
    ],
    "tests/test_dev_loop.py": [
      "test_dev_loop_initialization",
      "test_single_development_cycle",
      "test_process_single_task",
      "test_skip_already_processed_tasks",
      "test_task_filtering_by_type",
      "test_max_tasks_limit",
      "test_error_handling_in_task_processing",
      "test_save_and_load_processed_tasks",
      "test_dry_run_mode",
      "test_run_development_cycle",
      "test_process_task_function",
      "test_run_continuous_loop",
      "test_full_cycle_with_real_scanner"
    ],
    "tests/test_activity_detection.py": [
      "test_idle_state_with_no_events",
      "test_low_activity_single_agent",
      "test_medium_activity_multiple_agents",
      "test_medium_activity_memory_writes",
      "test_high_activity_with_flows",
      "test_high_activity_many_events",
      "test_high_activity_frequent_memory_writes",
      "test_event_window_cleanup",
      "test_activity_level_transitions",
      "test_recent_events_limit"
    ],
    "tests/test_monitor_status.py": [
      "test_get_status_shape"
    ],
    "tests/test_memory_tools.py": [
      "test_write_and_read_tools_roundtrip"
    ],
    "tests/test_firestore_memory.py": [
      "test_init_with_firestore_available",
      "test_init_without_firestore",
      "test_init_with_firestore_error",
      "test_fallback_write_without_firestore",
      "test_memory_item_conversion",
      "test_sync_to_firestore",
      "test_local_cache_management",
      "test_search_firestore_fallback",
      "test_get_memory_stats_without_firestore",
      "test_get_memory_stats_with_firestore",
      "test_force_sync_without_firestore",
      "test_consolidate_memories_without_firestore",
      "test_create_firestore_memory_store_success",
      "test_create_firestore_memory_store_fallback",
      "test_end_to_end_fallback_mode",
      "test_mock_firestore_workflow"
    ],
    "tests/test_devcycle_loop.py": [
      "test_devcycle_slugify"
    ],
    "tests/test_mvp_runner.py": [
      "test_run_mvp_returns_summary_dict"
    ]
  },
  "workflows": [
    {
      "name": "issue-to-pr.yml",
      "path": ".github/workflows/issue-to-pr.yml",
      "workflow_name": "Issue to PR (Disabled)",
      "runs_tests": false
    },
    {
      "name": "manual-one-shot-dev-cycle.yml",
      "path": ".github/workflows/manual-one-shot-dev-cycle.yml",
      "workflow_name": "Autonomous Dev Cycle (manual)",
      "runs_tests": false
    },
    {
      "name": "weekly-autonomous-scan.yml",
      "path": ".github/workflows/weekly-autonomous-scan.yml",
      "workflow_name": "Weekly Scan (Manual)",
      "runs_tests": false
    },
    {
      "name": "firestore-smoke.yml",
      "path": ".github/workflows/firestore-smoke.yml",
      "workflow_name": "Firestore Smoke (optional)",
      "runs_tests": false
    },
    {
      "name": "docs-alignment.yml",
      "path": ".github/workflows/docs-alignment.yml",
      "workflow_name": "docs-alignment (Disabled)",
      "runs_tests": false
    },
    {
      "name": "integration-tests.yml",
      "path": ".github/workflows/integration-tests.yml",
      "workflow_name": "integration-tests (Disabled)",
      "runs_tests": false
    },
    {
      "name": "adr-check.yml",
      "path": ".github/workflows/adr-check.yml",
      "workflow_name": "ADR Check (manual)",
      "runs_tests": false
    },
    {
      "name": "release-notes.yml",
      "path": ".github/workflows/release-notes.yml",
      "workflow_name": "Release Notes",
      "runs_tests": false
    },
    {
      "name": "ci.yml",
      "path": ".github/workflows/ci.yml",
      "workflow_name": "CI",
      "runs_tests": true
    },
    {
      "name": "autonomy-planning.yml",
      "path": ".github/workflows/autonomy-planning.yml",
      "workflow_name": "Autonomy Planning (Disabled)",
      "runs_tests": false
    }
  ],
  "agents": [
    {
      "name": "class:TaskComplexity",
      "docstring": "Task complexity levels for orchestration planning.",
      "file": "ai/agents/enhanced_mother.py"
    },
    {
      "name": "class:class",
      "docstring": "Represents a clarification question for ambiguous tasks.",
      "file": "ai/agents/enhanced_mother.py"
    },
    {
      "name": "class:class",
      "docstring": "Represents a complex task broken down into specialized subtasks.",
      "file": "ai/agents/enhanced_mother.py"
    },
    {
      "name": "class:class",
      "docstring": "Results from orchestrated agent team execution.",
      "file": "ai/agents/enhanced_mother.py"
    },
    {
      "name": "class:EnhancedMotherAgent",
      "docstring": "Enhanced Mother Agent with sophisticated orchestration capabilities.",
      "file": "ai/agents/enhanced_mother.py"
    },
    {
      "name": "class:Agent",
      "docstring": "",
      "file": "ai/agents/enhanced_agents.py"
    },
    {
      "name": "class:DummyTool",
      "docstring": "",
      "file": "ai/agents/enhanced_agents.py"
    },
    {
      "name": "class:EnhancedFather",
      "docstring": "Enhanced Father agent with intelligent persistent memory.\n    \n    The Father agent is the strategic planner and uses memory to:\n    - Track long-term goals across sessions\n    - Learn from past decisions and outcomes\n    - Analyze development patterns and focus areas\n    - Maintain strategic context across deployments",
      "file": "ai/agents/enhanced_agents.py"
    },
    {
      "name": "class:EnhancedDeveloper",
      "docstring": "Enhanced Developer agent with intelligent persistent memory.\n    \n    The Developer agent uses memory to:\n    - Remember successful implementation patterns\n    - Learn from past bugs and solutions\n    - Track refactoring techniques that worked\n    - Build knowledge of codebase patterns",
      "file": "ai/agents/enhanced_agents.py"
    },
    {
      "name": "class:EnhancedArchitect",
      "docstring": "Enhanced Architect agent with intelligent persistent memory.\n    \n    The Architect agent uses memory to:\n    - Learn from past architectural decisions\n    - Track TDD patterns and their effectiveness\n    - Build knowledge of design patterns that work\n    - Remember ADR outcomes and lessons",
      "file": "ai/agents/enhanced_agents.py"
    },
    {
      "name": "class:EnhancedQA",
      "docstring": "Enhanced QA agent with intelligent persistent memory.\n    \n    The QA agent uses memory to:\n    - Learn from past bugs and edge cases\n    - Remember effective testing strategies\n    - Track which test patterns catch real issues\n    - Build knowledge of failure modes",
      "file": "ai/agents/enhanced_agents.py"
    },
    {
      "name": "class:Agent",
      "docstring": "",
      "file": "ai/agents/DocumentationAgent.py"
    },
    {
      "name": "class:Agent",
      "docstring": "Agent class for the Fresh AI system.",
      "file": "ai/agents/base_agent.py"
    },
    {
      "name": "class:class",
      "docstring": "Child agent spawned by Mother Agent.",
      "file": "ai/agents/mother.py"
    },
    {
      "name": "class:class",
      "docstring": "Request to spawn a new agent.",
      "file": "ai/agents/mother.py"
    },
    {
      "name": "class:class",
      "docstring": "Result from an agent execution.",
      "file": "ai/agents/mother.py"
    },
    {
      "name": "class:MotherAgent",
      "docstring": "Mother Agent that spawns and manages child agents.\n    \n    This agent implements the core spawning interface for creating\n    specialized agents based on task requirements. It maintains\n    history of spawned agents and persists context to memory.",
      "file": "ai/agents/mother.py"
    },
    {
      "name": "class:Agent",
      "docstring": "",
      "file": "ai/agents/research_agents.py"
    },
    {
      "name": "class:IntelligentMemoryStore",
      "docstring": "",
      "file": "ai/agents/research_agents.py"
    },
    {
      "name": "class:MemoryType",
      "docstring": "",
      "file": "ai/agents/research_agents.py"
    },
    {
      "name": "class:class",
      "docstring": "Result from a research agent operation.",
      "file": "ai/agents/research_agents.py"
    },
    {
      "name": "class:MarketResearchAgent",
      "docstring": "Agent specialized in market research using EXA web search.",
      "file": "ai/agents/research_agents.py"
    },
    {
      "name": "class:TechnicalAssessmentAgent",
      "docstring": "Agent specialized in technical feasibility assessment.",
      "file": "ai/agents/research_agents.py"
    },
    {
      "name": "class:OpportunityScoringAgent",
      "docstring": "Agent specialized in scoring and ranking business opportunities.",
      "file": "ai/agents/research_agents.py"
    },
    {
      "name": "class:AppType",
      "docstring": "Types of applications the agent can create.",
      "file": "ai/agents/app_genesis.py"
    },
    {
      "name": "class:DevelopmentPhase",
      "docstring": "Phases of application development.",
      "file": "ai/agents/app_genesis.py"
    },
    {
      "name": "class:class",
      "docstring": "Individual application requirement.",
      "file": "ai/agents/app_genesis.py"
    },
    {
      "name": "class:class",
      "docstring": "Complete application specification.",
      "file": "ai/agents/app_genesis.py"
    },
    {
      "name": "class:class",
      "docstring": "Individual development task for agents.",
      "file": "ai/agents/app_genesis.py"
    },
    {
      "name": "class:AppGenesisAgent",
      "docstring": "Agent that creates and develops entire applications autonomously.",
      "file": "ai/agents/app_genesis.py"
    },
    {
      "name": "class:from",
      "docstring": "",
      "file": "ai/agents/senior_reviewer.py"
    },
    {
      "name": "class:ReviewDecision",
      "docstring": "Possible review decisions.",
      "file": "ai/agents/senior_reviewer.py"
    },
    {
      "name": "class:class",
      "docstring": "Result of a senior review.",
      "file": "ai/agents/senior_reviewer.py"
    },
    {
      "name": "class:SeniorReviewer",
      "docstring": "Senior Reviewer Agent for autonomous code quality control.\n    \n    This agent acts as an experienced senior developer who:\n    - Reviews code changes for quality and maintainability\n    - Checks for security vulnerabilities\n    - Ensures code follows best practices\n    - Makes approve/reject decisions autonomously",
      "file": "ai/agents/senior_reviewer.py"
    }
  ],
  "memory_stores": [
    {
      "name": "class:EnhancedFirestoreMemoryStore",
      "docstring": "Enhanced Firestore memory store with intelligent features and production capabilities.\n    \n    Combines intelligent memory processing with persistent Firestore storage,\n    including backup/restore, analytics, and production-grade reliability.",
      "file": "ai/memory/enhanced_firestore.py"
    },
    {
      "name": "class:MemoryStore",
      "docstring": "",
      "file": "ai/memory/store.py"
    },
    {
      "name": "class:InMemoryMemoryStore",
      "docstring": "",
      "file": "ai/memory/store.py"
    },
    {
      "name": "class:IntelligentMemoryStore",
      "docstring": "Enhanced memory store with semantic search and auto-classification.",
      "file": "ai/memory/intelligent_store.py"
    },
    {
      "name": "class:FirestoreMemoryStore",
      "docstring": "Firestore-backed intelligent memory store for persistent agent memory.\n    \n    Extends IntelligentMemoryStore with:\n    - Persistent storage in Google Cloud Firestore\n    - Automatic memory consolidation and cleanup\n    - Cross-session memory persistence\n    - Activity-based memory relevance scoring",
      "file": "ai/memory/firestore_store.py"
    },
    {
      "name": "class:InMemoryMemoryStore",
      "docstring": "In-memory store for AI data.",
      "file": "ai/memory/in_memory_store.py"
    },
    {
      "name": "class:FirestoreMemoryStore",
      "docstring": "Firestore-backed memory store (staging-only as per ADR-002/003).\n\n    Requires google-cloud-firestore and FIREBASE_* env vars. If prerequisites are\n    not met, raises RuntimeError at init.",
      "file": "ai/memory/firestore.py"
    }
  ],
  "dependencies": {
    "agency_swarm": false,
    "google_cloud_firestore": false,
    "openai": true
  },
  "stats": {
    "total_python_files": 5019,
    "total_test_files": 31,
    "total_docs": 139
  }
}