name: Autonomous Dev Cycle (manual)
true:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Run in dry-run mode (scan only, no agent execution)
        required: false
        default: false
        type: boolean
      offline:
        description: Offline mode (skip OpenAI/network calls)
        required: false
        default: false
        type: boolean
      max_tasks:
        description: Max tasks to process in this run
        required: false
        default: 5
        type: number
permissions:
  contents: write
  pull-requests: write
concurrency:
  group: manual-autonomous-dev
  cancel-in-progress: false
jobs:
  run-once:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FRESH_USE_FIRESTORE: ${{ vars.FRESH_USE_FIRESTORE }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install Poetry
      run: pipx install poetry
    - name: Cache Poetry
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}-manual-dev
    - name: Install dependencies
      run: 'poetry install --no-interaction --no-root

        '
    - name: One-shot dev cycle
      run: 'ARGS="--once --max-tasks ${{ github.event.inputs.max_tasks }}"

        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then ARGS="$ARGS --dry-run";
        fi

        if [ "${{ github.event.inputs.offline }}" = "true" ]; then ARGS="$ARGS --offline";
        fi

        poetry run python -m ai.cli.fresh run $ARGS

        '
'on':
  workflow_dispatch: {}
