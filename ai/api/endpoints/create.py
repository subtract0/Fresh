"""
API endpoint for create
Generated by Advanced Feature Stub Generator
"""
from datetime import datetime
from typing import Optional, Dict, Any

from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel, Field, root_validator

router = APIRouter()


class createRequest(BaseModel):
    """Request model for the generic create endpoint."""
    data: Dict[str, Any] = Field(
        ...,
        title="Payload",
        description="Arbitrary JSON-serialisable payload to create a new resource",
        example={"name": "John Doe", "email": "john@example.com"},
    )

    @root_validator
    def _validate_data_not_empty(cls, values):  # noqa: N805
        """Ensure that the `data` field is not empty."""
        data = values.get("data")
        if data is None or (isinstance(data, dict) and not data):
            raise ValueError("`data` must not be empty")
        return values


class createResponse(BaseModel):
    """Response model for the generic create endpoint."""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


@router.post("/api/v1/create", response_model=createResponse, status_code=status.HTTP_201_CREATED)
async def create_endpoint(request: createRequest) -> createResponse:
    """
    Generic resource creation endpoint.

    Receives an arbitrary JSON payload, performs minimal validation, and returns
    a confirmation response. In a real-world application this would persist the
    data to a database or trigger additional business logic.
    """
    try:
        # Simulate resource creation logic. Replace with real implementation.
        # Example: new_resource_id = db.insert(request.data)
        result_data = {
            "resource": request.data,
            "status": "created",
        }

        return createResponse(
            success=True,
            message="Resource created successfully",
            data=result_data,
        )

    except ValueError as ve:
        # Raised by validation logic or business rules
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(ve),
        ) from ve
    except HTTPException:
        # Pass through existing HTTPExceptions
        raise
    except Exception as e:  # pragma: no cover
        # Unknown/unexpected error
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred: {str(e)}",
        ) from e


# Export router for main application
__all__ = ["router", "createRequest", "createResponse"]