"""
API endpoint for analyze_usage_patterns
Generated by Advanced Feature Stub Generator
"""
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List
from datetime import datetime

router = APIRouter()


class analyze_usage_patternsRequest(BaseModel):
    """Request model for analyze_usage_patterns."""
    data: Dict[str, Any]


class analyze_usage_patternsResponse(BaseModel):
    """Response model for analyze_usage_patterns."""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


def _parse_timestamp(raw_ts: Any) -> datetime:
    """
    Attempt to parse a timestamp from various possible representations.

    Args:
        raw_ts: The raw timestamp value.

    Returns:
        A datetime object.

    Raises:
        ValueError: If the timestamp cannot be parsed.
    """
    if isinstance(raw_ts, datetime):
        return raw_ts
    if isinstance(raw_ts, (int, float)):
        # Assume Unix epoch
        return datetime.fromtimestamp(raw_ts)
    if isinstance(raw_ts, str):
        ts = raw_ts.strip()
        # Handle common ISO format with Z suffix
        if ts.endswith("Z"):
            ts = ts[:-1]
        try:
            return datetime.fromisoformat(ts)
        except ValueError:
            # Try RFC 2822 or other common formats
            for fmt in ("%a, %d %b %Y %H:%M:%S %z", "%Y-%m-%d %H:%M:%S"):
                try:
                    return datetime.strptime(ts, fmt)
                except ValueError:
                    continue
    raise ValueError(f"Unrecognized timestamp format: {raw_ts!r}")


def _validate_events(events: Any) -> List[Dict[str, Any]]:
    """
    Validate and normalize the events list.

    Args:
        events: Raw events data.

    Returns:
        A list of event dictionaries with parsed timestamps.

    Raises:
        HTTPException: If validation fails.
    """
    if not isinstance(events, list):
        raise HTTPException(
            status_code=422,
            detail="`events` must be a list of event objects."
        )

    normalized_events: List[Dict[str, Any]] = []
    for idx, event in enumerate(events):
        if not isinstance(event, dict):
            raise HTTPException(
                status_code=422,
                detail=f"Event at index {idx} is not an object."
            )
        if "timestamp" not in event or "action" not in event:
            raise HTTPException(
                status_code=422,
                detail=f"Event at index {idx} missing required fields `timestamp` and/or `action`."
            )
        try:
            parsed_ts = _parse_timestamp(event["timestamp"])
        except ValueError as exc:
            raise HTTPException(
                status_code=422,
                detail=f"Event at index {idx} has invalid timestamp: {exc}"
            ) from exc
        normalized_events.append(
            {
                "timestamp": parsed_ts,
                "action": str(event["action"]),
                "metadata": event.get("metadata", {}),
            }
        )
    return normalized_events


def _analyze_events(events: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Perform analysis on the validated events.

    Args:
        events: Normalized list of events.

    Returns:
        Dictionary containing analysis results.
    """
    total_events = len(events)
    actions_count: Dict[str, int] = {}
    timestamps: List[datetime] = []

    for event in events:
        action = event["action"]
        actions_count[action] = actions_count.get(action, 0) + 1
        timestamps.append(event["timestamp"])

    if timestamps:
        first_event = min(timestamps)
        last_event = max(timestamps)
        active_days = len({ts.date() for ts in timestamps})
    else:
        first_event = last_event = None
        active_days = 0

    most_frequent_action = None
    if actions_count:
        most_frequent_action = max(actions_count.items(), key=lambda item: item[1])[0]

    return {
        "total_events": total_events,
        "actions_count": actions_count,
        "first_event": first_event.isoformat() if first_event else None,
        "last_event": last_event.isoformat() if last_event else None,
        "active_days": active_days,
        "most_frequent_action": most_frequent_action,
    }


@router.post("/api/v1/analyze-usage-patterns", response_model=analyze_usage_patternsResponse)
async def analyze_usage_patterns_endpoint(
    request: analyze_usage_patternsRequest,
) -> analyze_usage_patternsResponse:
    """
    Analyze usage patterns based on event data supplied in the request.

    Expects `request.data` to include an `events` key containing a list of event
    objects with at least `timestamp` and `action` fields.

    Returns aggregated insights such as total events, counts per action,
    active days, and timestamps for first/last events.
    """
    try:
        if not request.data:
            raise HTTPException(status_code=422, detail="No data provided.")

        events_raw = request.data.get("events")
        validated_events = _validate_events(events_raw)
        analysis_result = _analyze_events(validated_events)

        return analyze_usage_patternsResponse(
            success=True,
            message="Usage pattern analysis completed successfully.",
            data=analysis_result,
        )

    except HTTPException:
        raise  # Re-raise to allow FastAPI to handle custom HTTP errors
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"analyze_usage_patterns execution failed: {str(e)}",
        ) from e


# Export router for main application
__all__ = ["router", "analyze_usage_patternsRequest", "analyze_usage_patternsResponse"]