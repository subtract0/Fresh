"""
API endpoint for BaseTool
Generated by Advanced Feature Stub Generator
"""
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel, Field, root_validator, ValidationError
from typing import Optional, Dict, Any, List
from datetime import datetime

router = APIRouter()


class BaseToolRequest(BaseModel):
    """Request model for BaseTool."""
    action: str = Field(
        ...,
        description="The action BaseTool should perform. Supported: echo, sum"
    )
    parameters: Optional[Dict[str, Any]] = Field(
        default_factory=dict,
        description="Parameters required for the given action"
    )

    @root_validator(pre=True)
    def validate_action(cls, values: Dict[str, Any]) -> Dict[str, Any]:
        action = values.get("action")
        if not action or not isinstance(action, str):
            raise ValueError("`action` must be a non-empty string")
        return values


class BaseToolResponse(BaseModel):
    """Response model for BaseTool."""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


def _execute_action(action: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
    """
    Internal helper that performs the requested action.

    Supported actions:
    - echo: returns the parameters as-is.
    - sum: expects a list of numbers under key 'values' and returns their sum.
    """
    if action == "echo":
        return {"echo": parameters}
    if action == "sum":
        values = parameters.get("values")
        if not isinstance(values, list) or not all(
            isinstance(v, (int, float)) for v in values
        ):
            raise ValueError(
                "`sum` action requires 'values' to be a list of numbers"
            )
        return {"result": sum(values)}
    raise ValueError(f"Unsupported action '{action}'")


@router.post("/api/v1/BaseTool", response_model=BaseToolResponse)
async def basetool_endpoint(
    request: BaseToolRequest,
) -> BaseToolResponse:
    """
    BaseTool endpoint.

    Processes the requested action and returns the result.
    """
    try:
        result_data = _execute_action(request.action, request.parameters or {})
        return BaseToolResponse(
            success=True,
            message="BaseTool executed successfully",
            data=result_data,
        )
    except (ValueError, ValidationError) as ve:
        # 400 - Bad Request for validation or user mistakes
        raise HTTPException(status_code=400, detail=str(ve))
    except Exception as e:
        # 500 - Internal Server Error for all other uncaught exceptions
        raise HTTPException(
            status_code=500,
            detail=f"BaseTool execution failed: {str(e)}",
        ) from e


# Export router for main application
__all__ = ["router", "BaseToolRequest", "BaseToolResponse"]