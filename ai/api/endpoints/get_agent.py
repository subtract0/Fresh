"""
API endpoint for get_agent
Generated by Advanced Feature Stub Generator
"""
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any
from datetime import datetime

router = APIRouter()

# --------------------------------------------------------------------------- #
# Pseudo in-memory datastore                                                  #
# --------------------------------------------------------------------------- #
# NOTE:
# In a production environment this would be replaced with a proper persistence
# layer (e.g., SQL/NoSQL database or external service). For the purpose of this
# feature implementation, an in-memory dictionary is sufficient and keeps the
# endpoint functional without additional dependencies.
AGENT_STORE: Dict[str, Dict[str, Any]] = {
    "agent_001": {
        "id": "agent_001",
        "name": "Alpha Agent",
        "version": "1.0.0",
        "status": "active",
        "created_at": "2023-01-01T12:00:00Z",
    },
    "agent_002": {
        "id": "agent_002",
        "name": "Beta Agent",
        "version": "2.3.4",
        "status": "maintenance",
        "created_at": "2023-06-15T08:30:00Z",
    },
}


# --------------------------------------------------------------------------- #
# Models                                                                      #
# --------------------------------------------------------------------------- #
class get_agentRequest(BaseModel):
    """
    Request model for get_agent.

    Attributes
    ----------
    agent_id : str
        Unique identifier of the agent to retrieve.
    include_stats : bool, optional
        If True, statistics about the agent are included in the response.
    """

    agent_id: str
    include_stats: Optional[bool] = False

    class Config:
        schema_extra = {
            "example": {
                "agent_id": "agent_001",
                "include_stats": True,
            }
        }


class get_agentResponse(BaseModel):
    """
    Response model for get_agent.

    Attributes
    ----------
    success : bool
        Indicates whether the request was successful.
    message : str
        Human-readable description of the result.
    data : dict, optional
        Payload containing the requested agent information.
    timestamp : datetime
        UTC timestamp when the response was generated.
    """

    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


# --------------------------------------------------------------------------- #
# Helper functions                                                            #
# --------------------------------------------------------------------------- #
def _fetch_agent_stats(agent_id: str) -> Dict[str, Any]:
    """
    Fetch statistics for a given agent.

    Parameters
    ----------
    agent_id : str
        Unique identifier of the agent.

    Returns
    -------
    dict
        Dictionary containing statistics for the agent.
    """
    # Stub implementation – replace with real metrics collection.
    # Statistics are simulated based on the hash of the agent_id for variability.
    base_value = abs(hash(agent_id)) % 1000
    return {
        "executions": base_value,
        "successful_executions": int(base_value * 0.9),
        "failed_executions": int(base_value * 0.1),
        "last_execution": datetime.utcnow().isoformat() + "Z",
    }


# --------------------------------------------------------------------------- #
# Endpoint                                                                    #
# --------------------------------------------------------------------------- #
@router.post("/api/v1/agent", response_model=get_agentResponse, tags=["Agents"])
async def get_agent_endpoint(request: get_agentRequest) -> get_agentResponse:
    """
    Retrieve detailed information about a specific agent.

    The endpoint expects a JSON body containing at least an ``agent_id``.
    Optionally, pass ``include_stats`` to obtain runtime statistics.

    Returns
    -------
    get_agentResponse
        Structured response containing agent details or an error message.
    """
    try:
        agent_id = request.agent_id.strip()
        if not agent_id:
            raise HTTPException(status_code=400, detail="agent_id must be provided and non-empty")

        agent_data = AGENT_STORE.get(agent_id)
        if agent_data is None:
            raise HTTPException(status_code=404, detail=f"Agent '{agent_id}' not found")

        # Deep copy to avoid accidental mutation of the in-memory store.
        response_payload: Dict[str, Any] = dict(agent_data)

        if request.include_stats:
            response_payload["stats"] = _fetch_agent_stats(agent_id)

        return get_agentResponse(
            success=True,
            message="Agent retrieved successfully",
            data=response_payload,
        )

    except HTTPException:
        # Re-raise known HTTP exceptions untouched so FastAPI can handle them.
        raise
    except Exception as exc:  # pragma: no cover – unforeseen errors
        # Log the exception here in a real application.
        raise HTTPException(
            status_code=500,
            detail=f"Unexpected error during agent retrieval: {str(exc)}",
        ) from exc


# Export router for main application
__all__ = ["router", "get_agentRequest", "get_agentResponse"]