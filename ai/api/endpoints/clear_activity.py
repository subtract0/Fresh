"""
API endpoint for clear_activity
Generated by Advanced Feature Stub Generator
"""
from datetime import datetime
from threading import Lock
from typing import Optional, Dict, Any

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field

router = APIRouter()

# -----------------------------------------------------------------------------
# In-memory activity store
# -----------------------------------------------------------------------------
_activity_store: Dict[str, Any] = {}
_activity_lock: Lock = Lock()


def _clear_all_activity() -> int:
    """
    Remove all activities from the in-memory store.

    Returns
    -------
    int
        Number of activity records removed.
    """
    with _activity_lock:
        removed = len(_activity_store)
        _activity_store.clear()
    return removed


def _clear_user_activity(user_id: str) -> int:
    """
    Remove activity associated with a single user.

    Parameters
    ----------
    user_id : str
        The user identifier whose activity should be cleared.

    Returns
    -------
    int
        Number of activity records removed (0 or 1).
    """
    with _activity_lock:
        return 1 if _activity_store.pop(user_id, None) is not None else 0


# -----------------------------------------------------------------------------
# Pydantic models
# -----------------------------------------------------------------------------
class clear_activityRequest(BaseModel):
    """
    Request model for clear_activity endpoint.

    Attributes
    ----------
    user_id : Optional[str]
        Identifier of the user whose activity should be cleared. Required when
        `clear_all` is False.
    clear_all : bool
        If True, the activity of all users will be cleared.
    data : Optional[Dict[str, Any]]
        Additional data or metadata to be logged with the request.
    """
    user_id: Optional[str] = Field(
        default=None, description="User ID whose activity will be cleared."
    )
    clear_all: bool = Field(
        default=False, description="Clear activity for all users."
    )
    data: Optional[Dict[str, Any]] = Field(
        default=None, description="Optional additional request data."
    )

    @classmethod
    def validate_request(cls, values: Dict[str, Any]) -> Dict[str, Any]:
        """
        Additional validation to ensure either `user_id` or `clear_all`
        is provided.
        """
        user_id = values.get("user_id")
        clear_all = values.get("clear_all", False)

        if not clear_all and not user_id:
            raise ValueError(
                "Either 'user_id' must be provided or 'clear_all' must be True."
            )
        return values

    _custom_validate = BaseModel.model_validator(mode="after")(validate_request)


class clear_activityResponse(BaseModel):
    """
    Response model for clear_activity endpoint.
    """
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


# -----------------------------------------------------------------------------
# Endpoint implementation
# -----------------------------------------------------------------------------
@router.post("/api/v1/clear-activity", response_model=clear_activityResponse)
async def clear_activity_endpoint(request: clear_activityRequest) -> clear_activityResponse:
    """
    Clear activity data for a user or all users.

    Request parameters
    ------------------
    request : clear_activityRequest
        Incoming request payload containing the user ID or `clear_all` flag.

    Returns
    -------
    clear_activityResponse
        Response object indicating the outcome of the operation.
    """
    try:
        # Business logic: clear activity based on request
        if request.clear_all:
            removed_count = _clear_all_activity()
            message = f"Cleared activity for all users. Records removed: {removed_count}."
        else:
            removed_count = _clear_user_activity(request.user_id)  # type: ignore[arg-type]
            message = (
                f"Cleared activity for user '{request.user_id}'."
                if removed_count
                else f"No activity found for user '{request.user_id}'."
            )

        result_data = {
            "feature": "clear_activity",
            "records_removed": removed_count,
            "request_data": request.data or {},
        }

        return clear_activityResponse(
            success=True,
            message=message,
            data=result_data,
        )

    except ValueError as ve:
        # Validation errors not caught by Pydantic
        raise HTTPException(status_code=400, detail=str(ve)) from ve
    except Exception as e:
        # Generic error handling
        raise HTTPException(
            status_code=500,
            detail=f"clear_activity execution failed: {str(e)}",
        ) from e


# -----------------------------------------------------------------------------
# Module exports
# -----------------------------------------------------------------------------
__all__ = ["router", "clear_activityRequest", "clear_activityResponse"]