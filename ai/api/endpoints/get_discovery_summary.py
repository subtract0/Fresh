"""
API endpoint for get_discovery_summary
Generated by Advanced Feature Stub Generator
"""
from datetime import datetime
from typing import Optional, Dict, Any, List

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field, validator

router = APIRouter()


class DiscoveryItem(BaseModel):
    """Individual discovery item used for analytics summarization."""
    category: str = Field(..., description="Category of the discovery")
    value: Optional[float] = Field(
        None, description="Numeric value associated with the discovery, if any"
    )
    timestamp: Optional[datetime] = Field(
        None, description="Timestamp when the discovery was recorded"
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default_factory=dict, description="Additional metadata for the discovery item"
    )

    @validator("category")
    def category_must_not_be_empty(cls, v: str) -> str:
        if not v or not v.strip():
            raise ValueError("category must be a non-empty string")
        return v.strip()


class get_discovery_summaryRequest(BaseModel):
    """Request model for get_discovery_summary."""
    discoveries: List[DiscoveryItem] = Field(
        ..., description="List of discovery items to summarize"
    )


class get_discovery_summaryResponse(BaseModel):
    """Response model for get_discovery_summary."""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


@router.post(
    "/api/v1/discovery-summary",
    response_model=get_discovery_summaryResponse,
    summary="Generate discovery summary analytics",
    tags=["Discovery"],
)
async def get_discovery_summary_endpoint(
    request: get_discovery_summaryRequest,
) -> get_discovery_summaryResponse:
    """
    Generate summary analytics from a list of discovery items.

    The endpoint aggregates discovery information such as:
      • Total number of discoveries
      • Counts per category
      • Average numeric value (if provided)
      • Most recent timestamp across all discoveries

    Raises
    ------
    HTTPException
        400 – If the request payload is invalid or empty.
        500 – For unexpected server errors.
    """
    try:
        discoveries = request.discoveries

        if not discoveries:
            raise HTTPException(
                status_code=400, detail="Request must include at least one discovery."
            )

        total_discoveries = len(discoveries)

        # Aggregate counts per category
        category_counts: Dict[str, int] = {}
        for item in discoveries:
            category_counts[item.category] = category_counts.get(item.category, 0) + 1

        # Compute average value for items that have a numeric value
        values = [item.value for item in discoveries if item.value is not None]
        average_value = sum(values) / len(values) if values else None

        # Determine most recent timestamp
        timestamps = [item.timestamp for item in discoveries if item.timestamp]
        latest_timestamp = max(timestamps) if timestamps else None

        result_data: Dict[str, Any] = {
            "total_discoveries": total_discoveries,
            "category_counts": category_counts,
            "average_value": average_value,
            "latest_timestamp": latest_timestamp,
        }

        return get_discovery_summaryResponse(
            success=True,
            message="Discovery summary generated successfully.",
            data=result_data,
        )

    except HTTPException:
        # Re-raise HTTPExceptions to preserve status codes
        raise
    except Exception as e:
        # Catch-all for unexpected errors
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error while generating discovery summary: {str(e)}",
        ) from e


# Export router for main application
__all__ = ["router", "get_discovery_summaryRequest", "get_discovery_summaryResponse"]