"""
API endpoint for check_budget_status
Generated by Advanced Feature Stub Generator
"""
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field, validator
from typing import Optional, Dict, Any
from datetime import datetime

router = APIRouter()


class check_budget_statusRequest(BaseModel):
    """
    Request model for check_budget_status.

    Fields
    -------
    budget_allocated : float
        Total allocated budget (must be > 0).
    budget_spent : float
        Amount spent so far (must be >= 0).
    threshold : Optional[float]
        Fraction (0–1) of allocated budget at which to raise an alert.
        Defaults to 0.9 (90 %).
    meta : Optional[Dict[str, Any]]
        Arbitrary metadata to echo back in the response.
    """
    budget_allocated: float = Field(..., gt=0, description="Total allocated budget (> 0)")
    budget_spent: float = Field(..., ge=0, description="Amount spent so far (>= 0)")
    threshold: Optional[float] = Field(0.9, gt=0, lt=1, description="Alert threshold fraction (0–1)")
    meta: Optional[Dict[str, Any]] = None

    @validator('budget_spent')
    def spent_not_exceed_extreme(cls, v, values):
        allocated = values.get('budget_allocated')
        if allocated is not None and v > allocated * 1000:  # arbitrary sanity check
            raise ValueError("budget_spent is unreasonably higher than budget_allocated")
        return v


class check_budget_statusResponse(BaseModel):
    """
    Response model for check_budget_status.
    """
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


def _compute_budget_status(
    allocated: float,
    spent: float,
    threshold: float
) -> Dict[str, Any]:
    """
    Internal helper to compute budget status.

    Parameters
    ----------
    allocated : float
        Total budget allocated.
    spent : float
        Amount spent so far.
    threshold : float
        Fraction at which to trigger alert.

    Returns
    -------
    Dict[str, Any]
        Computed budget metrics and status flags.
    """
    percent_used = spent / allocated if allocated else 0.0
    remaining = max(allocated - spent, 0.0)

    if spent > allocated:
        status = "over_budget"
        alert = True
    elif percent_used >= threshold:
        status = "near_threshold"
        alert = True
    else:
        status = "within_budget"
        alert = False

    return {
        "allocated": allocated,
        "spent": spent,
        "remaining": remaining,
        "percent_used": round(percent_used, 4),
        "threshold": threshold,
        "status": status,
        "alert": alert,
    }


@router.post("/api/v1/check-budget-status", response_model=check_budget_statusResponse)
async def check_budget_status_endpoint(
    request: check_budget_statusRequest
) -> check_budget_statusResponse:
    """
    Endpoint to evaluate current budget usage and determine whether an alert
    should be raised based on a configurable threshold.

    The endpoint returns detailed budget metrics along with a status flag:
    - over_budget: spent exceeds allocated.
    - near_threshold: spent is within the threshold fraction of allocated.
    - within_budget: safe usage below threshold.

    Parameters
    ----------
    request : check_budget_statusRequest
        Parsed and validated request payload.

    Returns
    -------
    check_budget_statusResponse
        Structured response containing success flag, message, and data.
    """
    try:
        metrics = _compute_budget_status(
            allocated=request.budget_allocated,
            spent=request.budget_spent,
            threshold=request.threshold,
        )

        # Attach any meta information provided by the caller
        if request.meta is not None:
            metrics["meta"] = request.meta

        return check_budget_statusResponse(
            success=True,
            message="Budget status computed successfully.",
            data=metrics,
        )

    except HTTPException:
        raise  # Re-raise FastAPI HTTPExceptions untouched.
    except Exception as e:
        # Log the exception here if a logging framework is in place
        raise HTTPException(
            status_code=500,
            detail=f"check_budget_status execution failed: {str(e)}",
        ) from e


# Export router for main application
__all__ = ["router", "check_budget_statusRequest", "check_budget_statusResponse"]