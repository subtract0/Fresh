"""
API endpoint for create_activity_panel
Generated by Advanced Feature Stub Generator
"""
from datetime import datetime
from threading import Lock
from typing import Optional, Dict, Any, List
from uuid import uuid4

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field, validator

router = APIRouter()

# In-memory store for created activity panels
_ACTIVITY_PANELS: Dict[str, Dict[str, Any]] = {}
_ACTIVITY_PANELS_LOCK = Lock()


class create_activity_panelRequest(BaseModel):
    """Request model for create_activity_panel."""
    name: str = Field(..., min_length=1, description="Human-readable name of the activity panel")
    widgets: Optional[List[Dict[str, Any]]] = Field(
        default_factory=list,
        description="List of widget configurations to be included in the panel",
    )
    description: Optional[str] = Field(
        default=None,
        max_length=1024,
        description="Optional description of the activity panel",
    )
    settings: Optional[Dict[str, Any]] = Field(
        default_factory=dict,
        description="Additional settings or metadata for the panel",
    )
    data: Optional[Dict[str, Any]] = Field(
        default_factory=dict,
        description="Arbitrary extra data supplied by the client",
    )

    @validator("widgets", each_item=True)
    def widget_must_have_type(cls, v: Dict[str, Any]) -> Dict[str, Any]:
        """
        Ensure each widget payload contains a 'type' field.
        """
        if "type" not in v:
            raise ValueError("Each widget must include a 'type' field")
        return v


class create_activity_panelResponse(BaseModel):
    """Response model for create_activity_panel."""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


def _generate_panel_id() -> str:
    """
    Generate a unique panel identifier.
    """
    return f"panel_{uuid4().hex}"


@router.post(
    "/api/v1/activity-panel",
    response_model=create_activity_panelResponse,
    summary="Create a new activity panel with monitoring dashboard",
    tags=["Activity Panel"],
)
async def create_activity_panel_endpoint(
    request: create_activity_panelRequest,
) -> create_activity_panelResponse:
    """
    Endpoint that creates a new activity panel.

    The panel is stored in an in-memory registry for demonstration purposes.
    In production, this should interface with a persistent datastore.
    """
    try:
        with _ACTIVITY_PANELS_LOCK:
            # Check for duplicate panel name
            if any(panel["name"] == request.name for panel in _ACTIVITY_PANELS.values()):
                raise HTTPException(
                    status_code=409,
                    detail=f"An activity panel with the name '{request.name}' already exists.",
                )

            # Create panel payload
            panel_id = _generate_panel_id()
            panel_payload = {
                "id": panel_id,
                "name": request.name,
                "description": request.description,
                "widgets": request.widgets,
                "settings": request.settings,
                "extra_data": request.data,
                "created_at": datetime.utcnow().isoformat(),
                "status": "active",
            }

            # Persist in in-memory store
            _ACTIVITY_PANELS[panel_id] = panel_payload

        return create_activity_panelResponse(
            success=True,
            message="Activity panel created successfully.",
            data=panel_payload,
        )

    except HTTPException:
        # Re-raise to allow FastAPI to handle HTTP specific errors
        raise
    except Exception as e:
        # Generic exception handling
        raise HTTPException(
            status_code=500,
            detail=f"Failed to create activity panel: {str(e)}",
        ) from e


# Export router for main application
__all__ = [
    "router",
    "create_activity_panelRequest",
    "create_activity_panelResponse",
]