"""
CLI command for AnalyzeMemoryUsage
Generated by Advanced Feature Stub Generator
"""
import json
import os
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional

import click
from rich.console import Console
from rich.table import Table

console = Console()


def _load_config(config_path: Optional[str]) -> Dict[str, Any]:
    """
    Load a JSON configuration file.

    Parameters
    ----------
    config_path : Optional[str]
        Path to the JSON configuration file.

    Returns
    -------
    Dict[str, Any]
        Configuration dictionary; empty if no path provided.

    Raises
    ------
    RuntimeError
        If the file cannot be read or contains invalid JSON.
    """
    if not config_path:
        return {}

    try:
        path = Path(config_path).expanduser().resolve()
        if not path.exists():
            raise FileNotFoundError(f"Configuration file not found: {path}")
        with path.open("r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, dict):
                raise ValueError("Configuration file must contain a JSON object")
            return data
    except Exception as exc:
        raise RuntimeError(f"Failed to load configuration file: {exc}") from exc


def _get_memory_usage_mb(pid: int) -> float:
    """
    Get Resident Set Size (RSS) memory usage in megabytes for the given PID.

    Parameters
    ----------
    pid : int
        Process ID.

    Returns
    -------
    float
        Memory usage in megabytes.

    Raises
    ------
    RuntimeError
        If the process cannot be inspected or psutil is unavailable.
    """
    try:
        import psutil  # type: ignore

        if not psutil.pid_exists(pid):
            raise RuntimeError(f"Process with PID {pid} does not exist")
        process = psutil.Process(pid)
        mem_info = process.memory_info()
        return round(mem_info.rss / (1024 * 1024), 2)
    except ImportError:
        if pid != os.getpid():
            raise RuntimeError(
                "psutil is required to inspect memory usage of other processes"
            )
        try:
            import resource
        except ImportError as exc:
            raise RuntimeError(
                "Cannot determine memory usage on this platform without psutil"
            ) from exc
        usage_kb = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        try:
            sysname = os.uname().sysname  # type: ignore[attr-defined]
        except AttributeError:
            sysname = "Linux"
        if sysname == "Darwin":
            usage_mb = usage_kb / (1024 * 1024)
        else:
            usage_mb = usage_kb / 1024
        return round(usage_mb, 2)
    except Exception as exc:
        raise RuntimeError(f"Unable to retrieve memory usage: {exc}") from exc


def _get_system_memory_info() -> Optional[Dict[str, float]]:
    """
    Retrieve system memory information if available.

    Returns
    -------
    Optional[Dict[str, float]]
        Dictionary with total_mb, available_mb, used_mb, percent_used or None if unavailable.
    """
    try:
        import psutil  # type: ignore

        vm = psutil.virtual_memory()
        total_mb = round(vm.total / (1024 * 1024), 2)
        available_mb = round(vm.available / (1024 * 1024), 2)
        used_mb = round((vm.total - vm.available) / (1024 * 1024), 2)
        percent_used = round(vm.percent, 2)
        return {
            "total_mb": total_mb,
            "available_mb": available_mb,
            "used_mb": used_mb,
            "percent_used": percent_used,
        }
    except Exception:
        return None


def _get_process_name(pid: int) -> Optional[str]:
    """
    Try to resolve the process name for a PID.

    Returns
    -------
    Optional[str]
        Process name or None if unavailable.
    """
    try:
        import psutil  # type: ignore

        if not psutil.pid_exists(pid):
            return None
        return psutil.Process(pid).name()
    except Exception:
        return None


def _generate_recommendations(memory_mb: float, threshold_mb: Optional[float], system_info: Optional[Dict[str, float]] = None) -> str:
    """
    Generate optimization recommendations based on memory usage.

    Parameters
    ----------
    memory_mb : float
        Measured memory usage in MB.
    threshold_mb : Optional[float]
        Configured threshold.
    system_info : Optional[Dict[str, float]]
        System memory info for contextual recommendations.

    Returns
    -------
    str
        Recommendation string.
    """
    tips_high = (
        "High memory usage detected. Review large objects, use lazy loading, "
        "prefer generators and iterators, chunk large operations, and delete unused references."
    )
    tips_threshold = (
        "Memory usage exceeds threshold. Profile with tracemalloc or pympler, optimize data structures "
        "(e.g., arrays instead of lists, dataclasses/__slots__), and avoid unnecessary copies."
    )
    tips_ok = "Memory usage appears within acceptable limits."

    if threshold_mb is not None and memory_mb > threshold_mb:
        base = tips_threshold
    elif memory_mb > 1024:
        base = tips_high
    else:
        base = tips_ok

    if system_info and system_info.get("total_mb", 0) > 0:
        percent_of_total = round((memory_mb / system_info["total_mb"]) * 100, 2)
        if percent_of_total >= 50:
            return (
                f"{base} This process uses ~{percent_of_total}% of system memory; consider "
                "downsizing in-memory datasets, memory-mapped files, or offloading to disk."
            )
        elif percent_of_total >= 20:
            return (
                f"{base} This process uses ~{percent_of_total}% of system memory; monitor for growth "
                "and consider batching workloads."
            )
    return base


@click.command(no_args_is_help=True)
@click.option("--verbose", "-v", is_flag=True, help="Enable verbose output")
@click.option(
    "--output",
    "-o",
    type=click.Choice(["json", "table", "plain"]),
    default="table",
    help="Output format",
)
@click.option(
    "--config",
    type=click.Path(exists=True, dir_okay=False, readable=True, path_type=str),
    help="Path to JSON configuration file",
)
@click.option("--pid", type=int, help="Process ID to analyze (default: current PID)")
@click.option(
    "--threshold",
    type=float,
    help="Memory usage threshold in MB to flag as high",
)
@click.pass_context
def analyzememoryusage(
    ctx: click.Context,
    verbose: bool,
    output: str,
    config: Optional[str],
    pid: Optional[int],
    threshold: Optional[float],
):
    """
    Analyze memory usage for a given process and provide optimization recommendations.

    Examples
    --------
    • Analyze current process memory usage in table format
        $ fresh-ai analyzememoryusage

    • Analyze specific PID with a 500 MB threshold and JSON output
        $ fresh-ai analyzememoryusage --pid 1234 --threshold 500 -o json

    • Use a configuration file
        $ fresh-ai analyzememoryusage --config ./memory_config.json
    """
    try:
        if verbose:
            console.print("[blue]Running AnalyzeMemoryUsage command…[/blue]")

        cfg = _load_config(config)
        pid_final: int = int(
            pid
            or cfg.get("pid")  # type: ignore[arg-type]
            or os.getpid()
        )

        threshold_cfg_value = (
            cfg.get("threshold_mb")
            if "threshold_mb" in cfg
            else cfg.get("threshold")
        )
        threshold_final_raw = threshold if threshold is not None else threshold_cfg_value
        threshold_final: Optional[float] = (
            float(threshold_final_raw) if threshold_final_raw is not None else None
        )

        if pid_final <= 0:
            raise ValueError("PID must be a positive integer")
        if threshold_final is not None and threshold_final <= 0:
            raise ValueError("Threshold must be a positive number")

        memory_mb = _get_memory_usage_mb(pid_final)

        system_info = _get_system_memory_info()
        memory_percent_of_system = None
        if system_info and system_info.get("total_mb", 0) > 0:
            memory_percent_of_system = round((memory_mb / system_info["total_mb"]) * 100, 2)

        status = (
            "exceeds_threshold"
            if threshold_final is not None and memory_mb > threshold_final
            else "within_threshold"
        )

        recommendation = _generate_recommendations(memory_mb, threshold_final, system_info)

        result_data: Dict[str, Any] = {
            "success": True,
            "feature": "AnalyzeMemoryUsage",
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "pid": pid_final,
            "process_name": _get_process_name(pid_final),
            "memory_usage_mb": memory_mb,
            "memory_percent_of_system": memory_percent_of_system,
            "threshold_mb": threshold_final,
            "status": status,
            "recommendation": recommendation,
            "system_memory": system_info,
        }

        if output == "json":
            console.print_json(json.dumps(result_data, indent=2))
        elif output == "table":
            table = Table(title="AnalyzeMemoryUsage Results", show_lines=True)
            table.add_column("Property", style="cyan", no_wrap=True)
            table.add_column("Value", style="magenta")
            for key, value in result_data.items():
                table.add_row(str(key), json.dumps(value, indent=2) if isinstance(value, (dict, list)) else str(value))
            console.print(table)
        else:  # plain
            for key, value in result_data.items():
                if isinstance(value, (dict, list)):
                    console.print(f"{key}: {json.dumps(value)}")
                else:
                    console.print(f"{key}: {value}")

        if verbose:
            console.print("[green]✅ AnalyzeMemoryUsage completed successfully[/green]")
    except Exception as exc:  # pragma: no cover
        error_payload = {
            "success": False,
            "feature": "AnalyzeMemoryUsage",
            "error": str(exc),
            "timestamp": datetime.utcnow().isoformat() + "Z",
        }
        if output == "json":
            console.print_json(json.dumps(error_payload, indent=2))
        else:
            console.print(f"[red]❌ AnalyzeMemoryUsage failed: {exc}[/red]")
            if verbose:
                console.print_exception()
        ctx.exit(1)


__all__ = ["analyzememoryusage"]