"""
CLI command for get_memory_stats
Generated by Advanced Feature Stub Generator
"""
import click
from typing import Optional, Dict, Any
from rich.console import Console
from rich.table import Table
from pathlib import Path
import json
import os
import sys
import time

try:
    import psutil  # type: ignore
except ImportError:  # pragma: no cover
    psutil = None  # pyright: ignore

console = Console()


def _load_config(file_path: str) -> Dict[str, Any]:
    """
    Load configuration from a JSON or YAML file.

    Parameters
    ----------
    file_path : str
        Path to the configuration file.

    Returns
    -------
    Dict[str, Any]
        Parsed configuration dictionary.
    """
    if not file_path:
        return {}

    path = Path(file_path)
    if not path.exists():
        raise FileNotFoundError(f"Configuration file not found: {file_path}")

    try:
        if path.suffix.lower() in {".yaml", ".yml"}:
            try:
                import yaml  # type: ignore
            except ImportError as ie:
                raise RuntimeError(
                    "PyYAML is required to load YAML configuration files"
                ) from ie
            with path.open("r", encoding="utf-8") as f:
                return yaml.safe_load(f) or {}
        else:  # treat as JSON by default
            with path.open("r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:  # pragma: no cover
        raise RuntimeError(f"Failed to load configuration file: {e}") from e


def _bytes_to_unit(num_bytes: int, unit: str) -> float:
    """
    Convert bytes to the requested unit.

    Parameters
    ----------
    num_bytes : int
        Number of bytes.
    unit : str
        Target unit: bytes, KB, MB, or GB.

    Returns
    -------
    float
        Converted value.
    """
    unit_lower = unit.lower()
    if unit_lower in {"byte", "bytes"}:
        return float(num_bytes)
    if unit_lower in {"kb", "kilobyte", "kilobytes"}:
        return num_bytes / 1024.0
    if unit_lower in {"mb", "megabyte", "megabytes"}:
        return num_bytes / (1024.0 ** 2)
    if unit_lower in {"gb", "gigabyte", "gigabytes"}:
        return num_bytes / (1024.0 ** 3)
    raise ValueError(f"Unsupported unit: {unit}")


def _get_system_memory_stats(unit: str) -> Dict[str, Any]:
    """
    Retrieve system-wide memory statistics.

    Parameters
    ----------
    unit : str
        Desired unit for memory values.

    Returns
    -------
    Dict[str, Any]
        Dictionary containing system memory statistics.
    """
    stats: Dict[str, Any] = {}
    if psutil:
        vm = psutil.virtual_memory()
        stats = {
            "total": _bytes_to_unit(vm.total, unit),
            "available": _bytes_to_unit(vm.available, unit),
            "used": _bytes_to_unit(vm.used, unit),
            "free": _bytes_to_unit(vm.free, unit),
            "percent": vm.percent,
        }
    else:  # Fallback using os.sysconf (POSIX only)
        if sys.platform.startswith("linux") or sys.platform == "darwin":
            pagesize = os.sysconf("SC_PAGE_SIZE")  # type: ignore
            phys_pages = os.sysconf("SC_PHYS_PAGES")  # type: ignore
            mem_total = pagesize * phys_pages  # total physical memory
            stats["total"] = _bytes_to_unit(mem_total, unit)
            stats["percent"] = None
        else:
            stats["error"] = "System memory stats not available (psutil missing)"
    return stats


def _get_process_memory_stats(unit: str) -> Dict[str, Any]:
    """
    Retrieve memory statistics for the current process.

    Parameters
    ----------
    unit : str
        Desired unit for memory values.

    Returns
    -------
    Dict[str, Any]
        Dictionary containing process memory statistics.
    """
    stats: Dict[str, Any] = {}
    if psutil:
        proc = psutil.Process(os.getpid())
        mem = proc.memory_info()
        stats = {
            "rss": _bytes_to_unit(mem.rss, unit),
            "vms": _bytes_to_unit(mem.vms, unit),
            "shared": _bytes_to_unit(getattr(mem, "shared", 0), unit),
        }
    else:
        try:
            import resource  # Unix specific
        except ImportError:
            stats["error"] = "Process memory stats not available (psutil missing)"
            return stats
        usage = resource.getrusage(resource.RUSAGE_SELF)
        stats["rss"] = _bytes_to_unit(usage.ru_maxrss * 1024, unit)
    return stats


@click.command()
@click.option(
    "--verbose",
    "-v",
    is_flag=True,
    help="Enable verbose output (prints progress and debug information)",
)
@click.option(
    "--output",
    "-o",
    type=click.Choice(["json", "table", "plain"]),
    default="table",
    help="Choose the output format",
)
@click.option(
    "--config",
    type=click.Path(exists=True, dir_okay=False, path_type=Path),
    help="Path to configuration file (JSON or YAML)",
)
@click.pass_context
def get_memory_stats(ctx, verbose: bool, output: str, config: Optional[Path]):
    """
    Retrieve and display system and process memory statistics.

    The command uses `psutil` when available for comprehensive metrics and falls
    back to built-in libraries on platforms where `psutil` is not installed.
    A configuration file may be provided to customise behaviour:

    Supported configuration keys
    ----------------------------
    units : str  (bytes, KB, MB, GB)
        The unit to display memory values in. Default is MB.
    """
    start_time = time.time()
    try:
        if verbose:
            console.print("[blue]Running get_memory_stats command...[/blue]")

        config_data: Dict[str, Any] = {}
        if config:
            config_data = _load_config(str(config))
            if verbose:
                console.print(f"[grey]Loaded configuration: {config_data}[/grey]")

        units = config_data.get("units", "MB")

        system_stats = _get_system_memory_stats(units)
        process_stats = _get_process_memory_stats(units)

        result_data = {
            "feature": "get_memory_stats",
            "status": "success",
            "units": units,
            "system_memory": system_stats,
            "process_memory": process_stats,
            "duration_ms": round((time.time() - start_time) * 1000, 2),
            "config_used": str(config) if config else None,
        }

        # Output results based on format
        if output == "json":
            console.print_json(json.dumps(result_data, indent=2, default=str))
        elif output == "table":
            # System stats table
            sys_table = Table(title="System Memory Statistics")
            sys_table.add_column("Metric", style="cyan", no_wrap=True)
            sys_table.add_column(f"Value ({units})", style="magenta")
            for key, value in system_stats.items():
                sys_table.add_row(str(key), str(value))
            # Process stats table
            proc_table = Table(title="Current Process Memory Statistics")
            proc_table.add_column("Metric", style="cyan", no_wrap=True)
            proc_table.add_column(f"Value ({units})", style="magenta")
            for key, value in process_stats.items():
                proc_table.add_row(str(key), str(value))
            console.print(sys_table)
            console.print(proc_table)
        else:  # plain
            console.print(f"Units: {units}")
            console.print("System Memory Stats:")
            for key, value in system_stats.items():
                console.print(f"  {key}: {value}")
            console.print("Process Memory Stats:")
            for key, value in process_stats.items():
                console.print(f"  {key}: {value}")

        if verbose:
            console.print(
                f"[green]✅ get_memory_stats completed successfully in {result_data['duration_ms']} ms[/green]"
            )

    except Exception as e:
        console.print(f"[red]❌ get_memory_stats failed: {str(e)}[/red]")
        if verbose:
            console.print_exception()
        ctx.exit(1)


# Export command for CLI registration
__all__ = ["get_memory_stats"]
