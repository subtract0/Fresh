"""
CLI command for AnalyzeMemoryUsage
Generated by Advanced Feature Stub Generator
"""
import json
import os
from pathlib import Path
from typing import Any, Dict, Optional

import click
from rich.console import Console
from rich.table import Table

console = Console()


def _load_config(config_path: Optional[str]) -> Dict[str, Any]:
    """
    Load a JSON configuration file.

    Parameters
    ----------
    config_path : Optional[str]
        Path to the JSON configuration file.

    Returns
    -------
    Dict[str, Any]
        Configuration dictionary; empty if no path provided.
    """
    if not config_path:
        return {}

    try:
        path = Path(config_path).expanduser().resolve()
        if not path.exists():
            raise FileNotFoundError(f"Configuration file not found: {path}")
        with path.open("r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, dict):
                raise ValueError("Configuration file must contain a JSON object")
            return data
    except Exception as exc:
        raise RuntimeError(f"Failed to load configuration file: {exc}") from exc


def _get_memory_usage_mb(pid: int) -> float:
    """
    Get Resident Set Size (RSS) memory usage in megabytes for the given PID.

    Parameters
    ----------
    pid : int
        Process ID.

    Returns
    -------
    float
        Memory usage in megabytes.

    Raises
    ------
    RuntimeError
        If the process cannot be inspected.
    """
    # Prefer psutil if available for accurate cross-platform stats
    try:
        import psutil  # type: ignore

        if not psutil.pid_exists(pid):
            raise RuntimeError(f"Process with PID {pid} does not exist")
        process = psutil.Process(pid)
        mem_info = process.memory_info()
        return round(mem_info.rss / (1024 * 1024), 2)
    except ImportError:
        # Fallback for current process only
        if pid != os.getpid():
            raise RuntimeError(
                "psutil is required to inspect memory usage of other processes"
            )
        try:
            import resource  # Unix only
        except ImportError as exc:
            raise RuntimeError(
                "Cannot determine memory usage on this platform without psutil"
            ) from exc
        usage_kb = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        # On macOS ru_maxrss is in bytes; on Linux it is kilobytes
        if os.uname().sysname == "Darwin":
            usage_mb = usage_kb / (1024 * 1024)
        else:
            usage_mb = usage_kb / 1024
        return round(usage_mb, 2)


def _generate_recommendations(memory_mb: float, threshold_mb: Optional[float]) -> str:
    """
    Generate optimization recommendations based on memory usage.

    Parameters
    ----------
    memory_mb : float
        Measured memory usage in MB.
    threshold_mb : Optional[float]
        Configured threshold.

    Returns
    -------
    str
        Recommendation string.
    """
    if threshold_mb is not None and memory_mb > threshold_mb:
        return (
            "Memory usage exceeds threshold. Consider profiling your application with "
            "tools like `tracemalloc`, optimizing data structures, or using generators "
            "to reduce memory footprint."
        )
    if memory_mb > 1024:
        return (
            "High memory usage detected. Review large objects, use lazy loading, "
            "and delete unused references."
        )
    return "Memory usage is within acceptable limits."


@click.command(no_args_is_help=True)
@click.option("--verbose", "-v", is_flag=True, help="Enable verbose output")
@click.option(
    "--output",
    "-o",
    type=click.Choice(["json", "table", "plain"]),
    default="table",
    help="Output format",
)
@click.option(
    "--config",
    type=click.Path(exists=True, dir_okay=False, readable=True, path_type=str),
    help="Path to JSON configuration file",
)
@click.option("--pid", type=int, help="Process ID to analyze (default: current PID)")
@click.option(
    "--threshold",
    type=float,
    help="Memory usage threshold in MB to flag as high",
)
@click.pass_context
def analyzememoryusage(
    ctx: click.Context,
    verbose: bool,
    output: str,
    config: Optional[str],
    pid: Optional[int],
    threshold: Optional[float],
):
    """
    Analyze memory usage for a given process and provide optimization recommendations.

    Examples
    --------
    • Analyze current process memory usage in table format
        $ fresh-ai analyzememoryusage

    • Analyze specific PID with a 500 MB threshold and JSON output
        $ fresh-ai analyzememoryusage --pid 1234 --threshold 500 -o json

    • Use a configuration file
        $ fresh-ai analyzememoryusage --config ./memory_config.json
    """
    try:
        if verbose:
            console.print("[blue]Running AnalyzeMemoryUsage command…[/blue]")

        # Configuration precedence: CLI overrides config file
        cfg = _load_config(config)
        pid_final: int = int(
            pid
            or cfg.get("pid")  # type: ignore[arg-type]
            or os.getpid()
        )
        threshold_final_raw = threshold if threshold is not None else cfg.get("threshold_mb")
        threshold_final: Optional[float] = (
            float(threshold_final_raw) if threshold_final_raw is not None else None
        )

        if threshold_final is not None and threshold_final <= 0:
            raise ValueError("Threshold must be a positive number")

        memory_mb = _get_memory_usage_mb(pid_final)
        status = (
            "exceeds_threshold"
            if threshold_final is not None and memory_mb > threshold_final
            else "within_threshold"
        )
        recommendation = _generate_recommendations(memory_mb, threshold_final)

        result_data = {
            "feature": "AnalyzeMemoryUsage",
            "pid": pid_final,
            "memory_usage_mb": memory_mb,
            "threshold_mb": threshold_final,
            "status": status,
            "recommendation": recommendation,
        }

        # Output formatting
        if output == "json":
            console.print_json(json.dumps(result_data, indent=2))
        elif output == "table":
            table = Table(title="AnalyzeMemoryUsage Results", show_lines=True)
            table.add_column("Property", style="cyan", no_wrap=True)
            table.add_column("Value", style="magenta")
            for key, value in result_data.items():
                table.add_row(str(key), str(value))
            console.print(table)
        else:  # plain
            for key, value in result_data.items():
                console.print(f"{key}: {value}")

        if verbose:
            console.print("[green]✅ AnalyzeMemoryUsage completed successfully[/green]")
    except Exception as exc:  # pragma: no cover
        console.print(f"[red]❌ AnalyzeMemoryUsage failed: {exc}[/red]")
        if verbose:
            console.print_exception()
        ctx.exit(1)


# Export command for CLI registration
__all__ = ["analyzememoryusage"]
