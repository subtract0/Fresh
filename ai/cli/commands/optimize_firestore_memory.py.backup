import click
from typing import Optional
from rich.console import Console
from rich.table import Table
from pathlib import Path
import json
import firebase_admin
from firebase_admin import firestore, credentials

console = Console()

def load_config(config_path: str) -> dict:
    with open(config_path, 'r') as file:
        return json.load(file)

def optimize_firestore(verbose: bool, config: Optional[dict]):
    if not firebase_admin._apps:
        cred = credentials.Certificate(config['serviceAccountKey'])
        firebase_admin.initialize_app(cred)
    
    db = firestore.client()
    
    # Example optimization: Fetch documents in batches
    collections = db.collections()
    for collection in collections:
        docs = collection.stream()
        for doc in docs:
            if verbose:
                console.print(f"Document ID: {doc.id}")

@click.command()
@click.option('--verbose', '-v', is_flag=True, help='Enable verbose output')
@click.option('--output', '-o', type=click.Choice(['json', 'table', 'plain']), 
              default='table', help='Output format')
@click.option('--config', type=click.Path(exists=True), help='Configuration file')
@click.pass_context
def optimize_firestore_memory(ctx, verbose: bool, output: str, config: Optional[str]):
    """
    optimize_firestore_memory command.
    """
    try:
        if verbose:
            console.print(f"[blue]Running optimize_firestore_memory command...[/blue]")
        
        if not config:
            raise ValueError("Configuration file is required.")
        
        config_data = load_config(config)
        
        optimize_firestore(verbose, config_data)
        
        result_data = {
            "feature": "optimize_firestore_memory",
            "status": "success", 
            "message": "Firestore memory optimization completed",
            "config_used": config,
            "verbose": verbose
        }
        
        if output == 'json':
            console.print_json(json.dumps(result_data, indent=2))
        elif output == 'table':
            table = Table(title=f"optimize_firestore_memory Results")
            table.add_column("Property", style="cyan")
            table.add_column("Value", style="magenta")
            
            for key, value in result_data.items():
                table.add_row(str(key), str(value))
            
            console.print(table)
        else:  # plain
            for key, value in result_data.items():
                console.print(f"{key}: {value}")
        
        if verbose:
            console.print(f"[green]✅ optimize_firestore_memory completed successfully[/green]")
            
    except Exception as e:
        console.print(f"[red]❌ optimize_firestore_memory failed: {str(e)}[/red]")
        if verbose:
            console.print_exception()
        ctx.exit(1)

__all__ = ["optimize_firestore_memory"]