"""
CLI command for reset_to_system_clock
Generated by Advanced Feature Stub Generator
"""
import json
import platform
import subprocess
import shutil
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict

import click
from rich.console import Console
from rich.table import Table

console = Console()


def _load_config(config_path: Optional[str]) -> Dict:
    """
    Load configuration from a JSON file if provided.

    Parameters
    ----------
    config_path : Optional[str]
        Path to the configuration file.

    Returns
    -------
    Dict
        Parsed configuration dictionary. Empty if no path supplied.
    """
    if not config_path:
        return {}
    try:
        path = Path(config_path).expanduser().resolve()
        with path.open("r", encoding="utf-8") as fp:
            return json.load(fp)
    except (OSError, json.JSONDecodeError) as exc:
        raise RuntimeError(f"Failed to load configuration file: {exc}") from exc


def _detect_sync_command() -> Optional[str]:
    """
    Detect the appropriate system command for time synchronization.

    Returns
    -------
    Optional[str]
        The command to execute or None if none was found.
    """
    system = platform.system().lower()

    if system in {"linux", "darwin"}:
        if shutil.which("timedatectl"):
            return "timedatectl"
        if shutil.which("ntpdate"):
            return "ntpdate"
    elif system == "windows":
        if shutil.which("w32tm"):
            return "w32tm"
    return None


def _sync_time(command: str, ntp_server: str, verbose: bool) -> Dict:
    """
    Synchronize system clock using the detected command.

    Parameters
    ----------
    command : str
        Command selected to perform synchronization.
    ntp_server : str
        NTP server to use when applicable.
    verbose : bool
        Verbose flag to enable detailed logging.

    Returns
    -------
    Dict
        Dictionary containing execution details.
    """
    start_time = datetime.utcnow()

    if command == "timedatectl":
        cmd = ["timedatectl", "set-ntp", "true"]
    elif command == "ntpdate":
        cmd = ["ntpdate", "-u", ntp_server]
    elif command == "w32tm":
        cmd = ["w32tm", "/resync"]
    else:
        raise RuntimeError("Unsupported command for time synchronization.")

    if verbose:
        console.print(f"[blue]Executing: {' '.join(cmd)}[/blue]")

    try:
        completed = subprocess.run(
            cmd,
            check=True,
            capture_output=True,
            text=True,
        )
        status = "success"
        message = "Time synchronization completed successfully."
    except FileNotFoundError:
        completed = subprocess.CompletedProcess(cmd, returncode=1, stdout="", stderr="Command not found.")
        status = "failed"
        message = f"Time synchronization failed: Command '{cmd[0]}' not found."
    except subprocess.CalledProcessError as exc:
        completed = exc
        status = "failed"
        message = f"Time synchronization failed: {exc}"
    except Exception as exc:  # Generic safeguard
        completed = subprocess.CompletedProcess(cmd, returncode=1, stdout="", stderr=str(exc))
        status = "failed"
        message = f"Unexpected error during synchronization: {exc}"

    end_time = datetime.utcnow()
    return {
        "command": " ".join(cmd),
        "returncode": completed.returncode,
        "stdout": (completed.stdout or "").strip(),
        "stderr": (completed.stderr or "").strip(),
        "status": status,
        "message": message,
        "start_time_utc": start_time.isoformat(timespec="seconds") + "Z",
        "end_time_utc": end_time.isoformat(timespec="seconds") + "Z",
        "duration_seconds": (end_time - start_time).total_seconds(),
    }


@click.command()
@click.option('--verbose', '-v', is_flag=True, help='Enable verbose output')
@click.option(
    '--output',
    '-o',
    type=click.Choice(['json', 'table', 'plain']),
    default='table',
    help='Output format',
)
@click.option(
    '--config',
    type=click.Path(exists=True),
    help='Path to configuration JSON file',
)
@click.option(
    '--ntp-server',
    default=None,
    help='Override NTP server (e.g., pool.ntp.org)',
)
@click.pass_context
def reset_to_system_clock(
    ctx,
    verbose: bool,
    output: str,
    config: Optional[str],
    ntp_server: Optional[str],
):
    """
    Reset the system clock and synchronize time with an NTP server.

    This command attempts to detect the appropriate system utility
    (timedatectl, ntpdate, or w32tm) and perform time synchronization.
    A configuration file may supply an alternative NTP server.

    Examples
    --------
    Reset using defaults:
        fresh reset-to-system-clock

    Specify NTP server explicitly:
        fresh reset-to-system-clock --ntp-server time.google.com

    Using configuration file:
        fresh reset-to-system-clock --config ~/.fresh/time_sync.json
    """
    try:
        if verbose:
            console.print("[blue]Running reset_to_system_clock command...[/blue]")

        config_data = _load_config(config)

        # Merge CLI arg with config, CLI takes precedence
        ntp_srv = ntp_server or config_data.get("ntp_server", "pool.ntp.org")

        command = _detect_sync_command()
        if command is None:
            raise RuntimeError(
                "No suitable time synchronization command found on this system."
            )

        sync_result = _sync_time(command, ntp_srv, verbose)

        result_data = {
            "feature": "reset_to_system_clock",
            "command_used": command,
            "ntp_server": ntp_srv,
            "status": sync_result["status"],
            "message": sync_result["message"],
            "details": {
                key: value
                for key, value in sync_result.items()
                if key not in {"status", "message"}
            },
        }

        # Output results based on format
        if output == 'json':
            console.print_json(json.dumps(result_data, indent=2))
        elif output == 'table':
            table = Table(title="reset_to_system_clock Results")
            table.add_column("Property", style="cyan")
            table.add_column("Value", style="magenta")

            for key, value in result_data.items():
                if isinstance(value, dict):
                    table.add_row(str(key), json.dumps(value, indent=2))
                else:
                    table.add_row(str(key), str(value))
            console.print(table)
        else:  # plain
            for key, value in result_data.items():
                if isinstance(value, dict):
                    console.print(f"{key}: {json.dumps(value, indent=2)}")
                else:
                    console.print(f"{key}: {value}")

        if result_data["status"] != "success":
            if verbose:
                console.print(f"[red]❌ reset_to_system_clock encountered errors[/red]")
            ctx.exit(1)

        if verbose:
            console.print("[green]✅ reset_to_system_clock completed successfully[/green]")

    except Exception as e:
        console.print(f"[red]❌ reset_to_system_clock failed: {e}[/red]")
        if verbose:
            console.print_exception()
        ctx.exit(1)


__all__ = ["reset_to_system_clock"]