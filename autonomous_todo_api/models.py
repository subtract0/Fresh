"""
Data Models

Pydantic and SQLAlchemy models for Todo items in the Todo Management API.
Defines database schema and request/response validation.

Generated by AAWOS (Autonomous AI Workflow System)
"""

from datetime import datetime
from typing import Optional
from sqlalchemy import Column, Integer, String, Boolean, DateTime
from pydantic import BaseModel, Field, ConfigDict
from database import Base

# SQLAlchemy Database Model
class TodoItem(Base):
    """
    SQLAlchemy model for todo items in the database.
    
    Attributes:
        id: Primary key, auto-incrementing integer
        title: Required title of the todo item
        description: Optional description
        completed: Boolean flag for completion status
        created_at: Timestamp when todo was created
        updated_at: Timestamp when todo was last updated
    """
    __tablename__ = "todos"

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    title = Column(String, nullable=False, index=True)
    description = Column(String, nullable=True)
    completed = Column(Boolean, default=False, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    def __repr__(self):
        return f"<TodoItem(id={self.id}, title='{self.title}', completed={self.completed})>"

# Pydantic Request Models
class TodoCreate(BaseModel):
    """
    Pydantic model for creating new todo items.
    
    Used for validating POST request data.
    """
    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "title": "Buy groceries",
                "description": "Milk, eggs, bread, and fruits",
                "completed": False
            }
        }
    )
    
    title: str = Field(..., min_length=1, max_length=200, description="Title of the todo item")
    description: Optional[str] = Field(None, max_length=1000, description="Optional description")
    completed: bool = Field(default=False, description="Completion status")

class TodoUpdate(BaseModel):
    """
    Pydantic model for updating existing todo items.
    
    All fields are optional to allow partial updates.
    Used for validating PUT request data.
    """
    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "title": "Buy groceries and cook dinner",
                "description": "Updated: Milk, eggs, bread, fruits, and vegetables",
                "completed": True
            }
        }
    )
    
    title: Optional[str] = Field(None, min_length=1, max_length=200, description="Title of the todo item")
    description: Optional[str] = Field(None, max_length=1000, description="Optional description")
    completed: Optional[bool] = Field(None, description="Completion status")

# Pydantic Response Models
class TodoResponse(BaseModel):
    """
    Pydantic model for todo item responses.
    
    Used for serializing database objects in API responses.
    """
    model_config = ConfigDict(
        from_attributes=True,
        json_schema_extra={
            "example": {
                "id": 1,
                "title": "Buy groceries",
                "description": "Milk, eggs, bread, and fruits",
                "completed": False,
                "created_at": "2023-01-15T10:30:00.123456",
                "updated_at": "2023-01-15T10:30:00.123456"
            }
        }
    )
    
    id: int = Field(..., description="Unique identifier")
    title: str = Field(..., description="Title of the todo item")
    description: Optional[str] = Field(None, description="Optional description")
    completed: bool = Field(..., description="Completion status")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
