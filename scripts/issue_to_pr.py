#!/usr/bin/env python3
"""
Issue → Goal (doc) → PR (safe mode)

Creates a branch and PR that adds a plan document for a labeled issue. This is a
safe, docs-only initial step toward autonomous development. It does not modify
code unless you later enable deeper automation.

Inputs (from env or CLI):
- ISSUE_NUMBER (env or --issue)
- GITHUB_TOKEN (env) — provided automatically in GitHub Actions
- GITHUB_REPOSITORY (env) — owner/repo
- BASE_BRANCH (env, default: main)

Behavior:
- Fetch issue title/body/labels
- Create docs/AUTONOMY/intake/issue_<n>_<ts>.md with context + plan scaffold
- Create branch feat/issue-<n>-autonomous-intake
- Commit, push, open PR with informative description
"""
from __future__ import annotations
import argparse
import datetime as dt
import json
import os
import subprocess
from pathlib import Path
from typing import Tuple

import requests


def run(cmd: list[str]) -> str:
    res = subprocess.run(cmd, check=True, capture_output=True, text=True)
    return res.stdout.strip()


def get_issue(repo: str, token: str, number: int) -> dict:
    url = f"https://api.github.com/repos/{repo}/issues/{number}"
    r = requests.get(url, headers={"Authorization": f"token {token}", "Accept": "application/vnd.github+json"})
    r.raise_for_status()
    return r.json()


def create_plan_file(issue: dict, out_dir: Path) -> Tuple[Path, str]:
    out_dir.mkdir(parents=True, exist_ok=True)
    ts = dt.datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    path = out_dir / f"issue_{issue['number']}_{ts}.md"
    title = issue.get("title", "")
    body = issue.get("body", "") or "(no description)"
    labels = ", ".join([l.get("name", "") for l in issue.get("labels", [])])

    md = f"""---
issue: #{issue['number']}
title: {title}
labels: [{labels}]
created: {ts}
---

# Goal
{title}

## Source
- Issue: https://github.com/{issue['repository_url'].split('repos/',1)[-1].split('/issues',1)[0]}/issues/{issue['number']}
- Labels: {labels or '(none)'}

## Context
{body}

## Plan (initial)
- [ ] Clarify acceptance criteria (if ambiguous)
- [ ] Identify smallest valuable change
- [ ] Draft ADR reference if architecture affected
- [ ] Add/adjust tests (TDD)
- [ ] Minimal implementation
- [ ] Update docs and cross-references

## Risks / Notes
- Safe-mode: docs-only until approved
- Expand automation later (code + tests) behind explicit flags
"""
    path.write_text(md, encoding="utf-8")
    return path, ts


def ensure_git_identity():
    try:
        run(["git", "config", "user.email"])
    except Exception:
        run(["git", "config", "user.email", "autobot@users.noreply.github.com"])
    try:
        run(["git", "config", "user.name"])
    except Exception:
        run(["git", "config", "user.name", "autobot"]) 


def create_branch(base: str, branch: str):
    run(["git", "fetch", "origin", base])
    run(["git", "checkout", base])
    run(["git", "reset", "--hard", f"origin/{base}"])
    run(["git", "checkout", "-b", branch])


def commit_and_push(paths: list[Path], branch: str, issue_number: int):
    for p in paths:
        run(["git", "add", str(p)])
    msg = f"docs: plan for issue #{issue_number} (autonomous intake)"
    run(["git", "commit", "-m", msg])
    run(["git", "push", "-u", "origin", branch])


def open_pr(repo: str, token: str, base: str, head: str, issue: dict, plan_path: Path, ts: str) -> dict:
    url = f"https://api.github.com/repos/{repo}/pulls"
    title = f"docs: autonomous plan for issue #{issue['number']} - {issue.get('title','')[:60]}"
    body = f"""
This PR adds a plan document generated by the Fresh autonomous system.

- Source issue: #{issue['number']}
- Labels: {', '.join([l.get('name','') for l in issue.get('labels',[])])}
- Plan file: `{plan_path}`

Safe-mode: docs-only change. After approval, automation can proceed to code/tests.
"""
    data = {"title": title, "body": body, "base": base, "head": head, "draft": False}
    r = requests.post(url, headers={"Authorization": f"token {token}", "Accept": "application/vnd.github+json"}, json=data)
    r.raise_for_status()
    return r.json()


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--issue", type=int, default=int(os.getenv("ISSUE_NUMBER", "0")))
    ap.add_argument("--base", type=str, default=os.getenv("BASE_BRANCH", "main"))
    args = ap.parse_args()
    if args.issue <= 0:
        raise SystemExit("ISSUE_NUMBER is required (env or --issue)")

    repo = os.getenv("GITHUB_REPOSITORY")
    token = os.getenv("GITHUB_TOKEN")
    if not repo or not token:
        raise SystemExit("GITHUB_REPOSITORY and GITHUB_TOKEN must be set")

    issue = get_issue(repo, token, args.issue)
    plan_dir = Path("docs/AUTONOMY/intake")
    plan_path, ts = create_plan_file(issue, plan_dir)

    ensure_git_identity()
    branch = f"feat/issue-{issue['number']}-autonomous-intake"
    create_branch(args.base, branch)
    commit_and_push([plan_path], branch, issue['number'])

    pr = open_pr(repo, token, args.base, branch, issue, plan_path, ts)
    print(json.dumps({"ok": True, "pr": pr}, indent=2))


if __name__ == "__main__":
    main()
